import time
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from pyzbar.pyzbar import decode
from PIL import Image


candidate_keys = [
    "8X1X4X9X7X8X1X1X2X3X2X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X3X3X2X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X4X3X2X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X2X6X2X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X3X6X2X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X4X6X2X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X2X7X2X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X3X7X2X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X4X7X2X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X2X8X2X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X3X8X2X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X4X8X2X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X2X9X2X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X3X9X2X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X4X9X2X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X2X3X3X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X3X3X3X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X4X3X3X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X2X6X3X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X3X6X3X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X4X6X3X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X2X7X3X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X3X7X3X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X4X7X3X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X2X8X3X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X3X8X3X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X4X8X3X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X2X9X3X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X3X9X3X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X4X9X3X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X2X3X4X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X3X3X4X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X4X3X4X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X2X6X4X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X3X6X4X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X4X6X4X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X2X7X4X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X3X7X4X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X4X7X4X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X2X8X4X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X3X8X4X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X4X8X4X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X2X9X4X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X3X9X4X8X5X3X1X5X",
    "8X1X4X9X7X8X1X1X4X9X4X8X5X3X1X5X",
]

driver = webdriver.Chrome("/usr/local/bin/chromedriver")
driver.get("https://jupiter.challenges.picoctf.org/problem/38421")
for k in candidate_keys:
    elem = driver.find_element_by_id("user_in")
    elem.clear()
    elem.send_keys(k)
    elem.send_keys(Keys.RETURN)
    time.sleep(1)
    img = driver.find_element_by_id("Area")
    if img.get_attribute("naturalWidth") != "0":
        # qrコードのスクショと読み取り
        png = img.screenshot_as_png
        file_name = f'/tmp/{k}.png'
        with open(file_name, 'wb') as f:
            f.write(png)
        data = decode(Image.open(file_name))
        if not data:
            continue
        code = data[0][0].decode('utf-8', 'ignore')
        print(data)
        print(code)
